/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package VIEW;

import PRIVATE.Painel_Pesquisa;
import DTO.PesquisaDTO;
import PRIVATE.EventClick;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPopupMenu;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author mello
 */
public class AppPrincipalVIEW extends javax.swing.JFrame {

    private JPopupMenu menu;
    private Painel_Pesquisa procura;

    public AppPrincipalVIEW() {
        initComponents();
        this.setTitle("App Clima");
        setIconImage();
        connectToDatabase();
        centreWindow(this);

        menu = new JPopupMenu();
        procura = new Painel_Pesquisa();
        menu.add(procura);
        menu.setFocusable(false);
        procura.addEventClick(new EventClick() {
            @Override
            public void itemClick(PesquisaDTO objpesquisadto) {
                menu.setVisible(false);
                pesquisa.setText(objpesquisadto.getTexto());
                addHistorico(objpesquisadto.getTexto());
                connectAPI(objpesquisadto.getTexto());
                System.out.println("Click item: " + objpesquisadto.getTexto());
            }

            @Override
            public void itemRemove(Component com, PesquisaDTO objpesquisadto) {
                procura.remove(com);
                RemoveHistorico(objpesquisadto.getTexto());
                menu.setPopupSize(menu.getWidth(), (procura.conseguirTamanhoItem() * 32) + 2);
                if (procura.conseguirTamanhoItem() == 0) {
                    menu.setVisible(false);
                }
                System.out.println("Remove Item: " + objpesquisadto.getTexto());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pesquisa = new PRIVATE.TextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAbout = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Clima");

        pesquisa.setPrefixIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/search.png"))); // NOI18N
        pesquisa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pesquisaMouseClicked(evt);
            }
        });
        pesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pesquisaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pesquisaKeyReleased(evt);
            }
        });

        jMenuBar1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                jMenuBar1ComponentMoved(evt);
            }
        });

        menuAbout.setText("Help");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuAbout.add(jMenuItem1);

        jMenuBar1.add(menuAbout);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(jLabel1)
                        .addContainerGap(188, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addContainerGap(203, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pesquisaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pesquisaMouseClicked
        if (procura.conseguirTamanhoItem() > 0) {
            menu.show(pesquisa, 0, pesquisa.getHeight());
            procura.clearSelected();
        }
    }//GEN-LAST:event_pesquisaMouseClicked

    private void pesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pesquisaKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_UP && evt.getKeyCode() != KeyEvent.VK_DOWN && evt.getKeyCode() != KeyEvent.VK_ENTER) {
            String text = pesquisa.getText().trim().toLowerCase();
            procura.setPesquisa(procurar(text));
            if (procura.conseguirTamanhoItem() > 0) {
                menu.show(pesquisa, 0, pesquisa.getHeight());
                menu.setPopupSize(menu.getWidth(), (procura.conseguirTamanhoItem() * 32) + 2);
            } else {
                menu.setVisible(false);
            }
        }
    }//GEN-LAST:event_pesquisaKeyReleased

    private void pesquisaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pesquisaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            procura.keyUp();
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            procura.keyDown();
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String texto = procura.getSelectedText();
            pesquisa.setText(texto);
            menu.setVisible(false);
        }
    }//GEN-LAST:event_pesquisaKeyPressed

    private void jMenuBar1ComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jMenuBar1ComponentMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuBar1ComponentMoved

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        TermosdeServico termos = new TermosdeServico(); 
        termos.setVisible(true);
        termos.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private List<PesquisaDTO> procurar(String procurar) {
        List<PesquisaDTO> list = new ArrayList<>();
        try {
            String sql = "select DISTINCT cidade, coalesce((select id_historico from historico where cidade=item_salvo limit 1),'') as historico from sugestoes where cidade like ? order by historico DESC, cidade limit 7";

            PreparedStatement pstm = conn.prepareStatement(sql);
            pstm.setString(1, "%" + procurar + "%");

            ResultSet rs = pstm.executeQuery();
            while (rs.next()) {
                String texto = rs.getString(1);
                boolean historico = !rs.getString(2).equals("");
                list.add(new PesquisaDTO(texto, historico));
            }
            rs.close();
            pstm.close();
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, "AppPrincipalVIEW: " + error);
            return null;
        }
        return list;
    }

    private void RemoveHistorico(String texto) {
        try {
            String sql = "delete from historico where item_salvo=? limit 1";
            PreparedStatement pstm = conn.prepareStatement(sql);
            pstm.setString(1, texto);
            pstm.execute();
            pstm.close();
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, "AppPrincipalVIEW: " + error);
        }
    }

    private Connection conn;

    private void connectToDatabase() {
        try {
            String url = "jdbc:mysql://sql10.freesqldatabase.com:3306/sql10659086?user=sql10659086&password=qi72hMs3kF";
            conn = DriverManager.getConnection(url);

        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, "AppPrincipalVIEW: " + error);
        }
    }

    private void addHistorico(String texto) {
        try {
            boolean add = true;
            String sql = "select id_historico from historico where item_salvo=? limit 1";
            PreparedStatement pstm = conn.prepareStatement(sql);
            pstm.setString(1, texto);
            ResultSet rs = pstm.executeQuery();
            if (rs.next()) {
                add = false;
            }
            rs.close();
            pstm.close();
            if (add) {
                String othersql = "insert into historico (item_salvo) values (?)";
                pstm = conn.prepareStatement(othersql);
                pstm.setString(1, texto);
                pstm.execute();
                pstm.close();
            }

        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, "AppPrincipalVIEW: " + error);
        }
    }
    
    private void connectAPI(String texto) {
        try {
            String sql = "SELECT latitude, longitude FROM sugestoes WHERE cidade = ?";
            PreparedStatement pstm = conn.prepareStatement(sql);
            pstm.setString(1, texto);
            ResultSet rs = pstm.executeQuery();
            while (rs.next()) {
                String lat = rs.getString("latitude");
                String lon = rs.getString("longitude");
                
                String api = "https://api.openweathermap.org/data/2.5/weather?lat=" + lat + "&lon=" + lon + "&appid=39b4b8957534286d3d7a4a23f5bd3ee6&units=metric&lang=pt_br";
                
                System.out.println(api);
            }
            rs.close();
            pstm.close();
            
        } catch (SQLException error) {
            JOptionPane.showMessageDialog(null, "AppPrincipalVIEW: " + error);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppPrincipalVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppPrincipalVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppPrincipalVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppPrincipalVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppPrincipalVIEW().setVisible(true);
            }
        });
    }

    private void setIconImage() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Assets/icons8-climate-64.png")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenu menuAbout;
    private PRIVATE.TextField pesquisa;
    // End of variables declaration//GEN-END:variables

    private void centreWindow(Window frame) {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
        frame.setLocation(x, y);
    }
}
